POTApp.controller('BasicQuoteInfo', function($scope, $rootScope, $state,$log,RTO_SERVICE,
		StorageService, VehicleService, InsurerService, PremiumService,CoverageService,
		PremiumCalculationService) {

	$scope.manufacturerYear = VehicleService.yearOfMfgList();
	$scope.vechileRegistration = VehicleService.vehicleRegisteredTo();
	$scope.policyTypeList = VehicleService.policyTypeList();
	$scope.productCode = StorageService.get("subProductCode");
	$scope.modelList = '';
	$scope.subModelList = '';
	$scope.prevPolicyExpDate = '';
	$scope.zoneCode ='';
	
	$scope.emailregEx = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,3}(?:\.[a-z]{2})?)$/i;
	
	$scope.minRegisterationDate = moment().subtract(5, 'year').format('MM/DD/YYYY');
	$scope.maxRegisterationDate = moment().subtract(1, 'day').format('MM/DD/YYYY');
	$scope.minPreviousPolicyDate = moment().subtract(1,'year').format('MM/DD/YYYY');
	$scope.maxPreviousPolicyDate = moment().add(60, 'days').format('MM/DD/YYYY');

	$scope.chooseRegDate = function() {
		var manufacturerYear = $scope.vehicleInfo.yearOfMfg;
		var minRegiDate = new Date();
		minRegiDate.setDate(01);
		minRegiDate.setMonth(0);
		minRegiDate.setFullYear(manufacturerYear);
		$scope.minRegisterationDate = moment(new Date(minRegiDate)).format('MM/DD/YYYY');
	}
	
	
	$scope.prepolicydatehide = function(){
		var predate = $scope.vehicleInfo.registrationDate;	
		var b = moment(predate, "MM/DD/YYYY");
		$scope.minPreviousPolicyDate = b.add(1, 'days').format('MM/DD/YYYY');
		$scope.vehicleInfo.isCarOwnerChanged='';
	}
	
	var customerDetails = StorageService.get("personalInfo");
	var vehicleDetails = StorageService.get("vehicleInfo");

	
	//////////////////////		Jitu 		//////////////////////
	$scope.submodelsList = [];
	$scope.modelname = '';

	VehicleService.getNCBListFromRestUrl().then(function(response){
		$scope.ncbList = response.data.ncbDtoList;
	},function(error){
		console.log("error")
	});
	
	$scope.currectNCBCalc=function(prevncb){
		$scope.vehicleInfo.currentNCB={};
		angular.forEach($scope.ncbList,function(value,index){
			if(prevncb===value.ncbPercentage){
				if((index+1)===$scope.ncbList.length){
					$scope.vehicleInfo.currentNCB=$scope.ncbList[index];
				}else{
					$scope.vehicleInfo.currentNCB=$scope.ncbList[index+1];
				}
			}
		});
		
	}
	
	VehicleService.getMakeListFromRestUrl().then(function(response){
//		console.log("data : "+JSON.stringify(response.data));
		$scope.makelist = response.data.makeList;
	},function(error){
		console.log("error")
	});
	InsurerService.getInsurerList().then(function(response) {
		$scope.insurerList = response.data.insurerList;
	});
	
	InsurerService.getRtoListFromRestUrl().then(function(response){
		$scope.rtoList = response.data.rtoMasterdtoList;
	});
		
	
	//////////////////////		Jitu 		//////////////////////
	if (angular.isUndefined(customerDetails)) {
		$scope.personalInfo = {
		    
			firstName : '',
			lastName : '',
			mobileNo : '',
			email : ''
		  
		}
	} else {
		$scope.personalInfo = customerDetails;
	}
	if (angular.isUndefined(vehicleDetails)) {
		$scope.vehicleInfo = {
			vehicleRegisteredTo : '',
			policyType : '',
			manufacturer : '',
			modelSubModel : '',
			registrationDate : '',
			rtoCode : '',
			fuelType : '',
			ZoneArea:'',
			engineCC : '',
			yearOfMfg : '',
			previousPolicyInsurer : '',
			prevPolicyExpDate : '',
			ncb : '',
			currentNCB:ncbPercentage=0
		}
	} else {
		$scope.vehicleInfo = vehicleDetails;
	}

	$scope.showModelList = function(makeobj) {
		$scope.vehicleInfo.modelSubModel = '';
		$scope.vehicleInfo.fuelType = '';
		$scope.vehicleInfo.engineCC = '';
		$scope.vehicleInfo.year = '';
		$scope.vehicleInfo.seatingCapacity = '';
		getModelList(makeobj.code);
		$scope.makename = makeobj.name;
	}
	function getModelList(makeCode){
		VehicleService.getModelsFromRestUrl().then(function(response){
			if(angular.isDefined(response.data.makeModelMap[makeCode])){
				$scope.modelsList = response.data.makeModelMap[makeCode];
			}
		});
	}
	
	$scope.zoneCode = function(rtoCode)
	{
		VehicleService.zoneValue().then(function(response) {
			$scope.vehicleInfo.ZoneArea = response.data[rtoCode.rtoCode];
		});
	}
	$scope.updateModel = function(model) {
		$scope.model = false;
		$scope.subModel = true;
		$scope.modelname = model.name;
		$scope.modelCode = model.code;
		$scope.vehicleInfo.model=model;
		getSubModelList(model.code);
	}
	function getSubModelList(modelCode){
		VehicleService.getMakeSubmodelFromRestUrl().then(function(response){
			if(!angular.isUndefined(response.data.modelSubModelMap[modelCode])){
				$scope.submodelsList = response.data.modelSubModelMap[modelCode];
			}
		});
	}
	$scope.updateSubModel = function(subModel) {
		
		$scope.vehicleInfo.fuelType = subModel.fuelType;
		$scope.vehicleInfo.engineCC = subModel.engineCC;
		$scope.vehicleInfo.year = subModel.year;
		$scope.vehicleInfo.seatingCapacity = subModel.seatingCapacity;

		$scope.model = false;
		$scope.subModel = false;
		$scope.vehicleInfo.subModel=subModel;
		$scope.vehicleInfo.modelSubModel = $scope.modelname + ","+ subModel.subModelName + ","+ subModel.seatingCapacity;
	}
	$scope.showCarOwnerShip = function() {
		if (angular.isUndefined($scope.vehicleInfo.prevPolicyExpDate)
				|| angular.equals('', $scope.vehicleInfo.prevPolicyExpDate)
				|| !$scope.isNoPolicy) {
			$scope.vehicleInfo.isCarOwnerChanged='';
			$scope.vehicleInfo.isAnyClaim='';
			return false;
		} else {
			return true;
		}
	}
	$scope.isNoPolicy = function() {
		if (angular.equals('NO POLICY', $scope.vehicleInfo.policyType.code)) {
			return false;
		} else {
			return true;
		}
	}

	
	$scope.ncbValue = function() {
		if (angular.equals('THIRDPARTY', $scope.vehicleInfo.policyType.code)) {
			return false;
		} else {
			return true;
		}
	}
	
	$scope.resetValue = function() {
		$scope.vehicleInfo.previousPolicyInsurer = '';
		$scope.vehicleInfo.prevPolicyExpDate = '';
		$scope.vehicleInfo.currentNCB = '';
		$scope.isCarOwnerChanged = '';
		$scope.isAnyClaim ='';
		
	};
	
	$scope.resetclaim = function(){
		$scope.vehicleInfo.isAnyClaim = '';
		$scope.vehicleInfo.ncb = '';
		$scope.vehicleInfo.currentNCB = '';
	} 
	

	$scope.submit = function(event, form) {
		if ($scope.form.$valid &&  $scope.personalInfo.mobileNo.toString().length==10) {
			StorageService.set("personalInfo", $scope.personalInfo);
			StorageService.set("vehicleInfo", $scope.vehicleInfo);
			CoverageService.removeAll();
			
			
			PremiumCalculationService.callServer().then(function(response) {
				console.log("hjfghdsg  "+JSON.stringify(response));
				if(response.data.message=== "SUCCESS"){
						InsurerService.getInsuredFromProduct($scope.productCode).then(function(response) {
							$state.go('premiumComparision');
					});
					
				}else{
					alert("Premium Calculation Failed");
				}
			}, function(errorResponse) {
				alert("Premium Calculation Failed"+JSON.stringify(errorResponse));
			});
		}
	};
	
	$scope.Thirdparty = function() {
		if (angular.equals('THIRDPARTY',
				$scope.vehicleInfo.policyType.code)) {
			return false;
		} else {
			return true;
		}
	}

	$scope.Comprehensive = function() {
		if (angular.equals('COMPREHENSIVE',
				$scope.vehicleInfo.policyType.code)) {
			return false;
		} else {
			return true;
		}
	}

				$scope.dateSelect = function(user) {
				$scope.subtracteddate = moment(user).format(
						'DD/MM/YYYY');

				$scope.subtractedDate = new Date($scope
						.formatString($scope.subtracteddate));
				$scope.currentDate = new Date();

				var timeDiff = Math.abs($scope.currentDate.getTime()
						- $scope.subtractedDate.getTime());


				$scope.dayDifference = Math.ceil(timeDiff
						/ (1000 * 3600 * 24));

				if ($scope.dayDifference <= 91) {
					alert("the date is in 90");
				} else {
					alert("it is out of 90");
					}

				}

				$scope.formatString = function(format) {
					var day = parseInt(format.substring(0, 2));
					var month = parseInt(format.substring(3, 5));
					var year = parseInt(format.substring(6, 10));
					var date = new Date(year, month - 1, day);
					return date;
				}
   
});
