POTApp
		.factory(
				'VehicleService',
				function($http, $q, $filter) {

					return {
						yearOfMfgList : yearOfMfgList,
						vehicleRegisteredTo : vehicleRegisteredTo,
						getNCBListFromRestUrl : getNCBListFromRestUrl,
						policyTypeList : policyTypeList,

						getMakeListFromRestUrl : getMakeListFromRestUrl,
						getModelsFromRestUrl : getModelsFromRestUrl,
						getMakeSubmodelFromRestUrl : getMakeSubmodelFromRestUrl,

						processMakeModelData : processMakeModelData,
						processMakeSubmodelData : processMakeSubmodelData,
						zoneValue : zoneValue
					}

					// /////////// Jitu /////////////
					function getMakeListFromRestUrl() {
						var deferred = $q.defer();
						$http({
							url : 'http://server1:8585/masters/getMake.json',
							method : "POST",
						}).then(function(response) {
							deferred.resolve(response);

						}, function(response) {
							deferred.reject(response);
						});
						return deferred.promise;
					}

					function yearOfMfgList() {
						var date = new Date();
						var year = $filter('date')(date, "yyyy");
						var dateBefore5Year = [];
						for (var i = 0; i < 5; i++) {
							dateBefore5Year[i] = year - i;
						}
						return dateBefore5Year;
					}

					function getNCBListFromRestUrl() {
						var deferred = $q.defer();
						$http(
								{
									url : 'http://server1:8585/masters/getallncbtype.json',
									method : "POST",
								})
								.

								then(
										function(response) {
											deferred.resolve(response);
											console
													.log("ncblist : "
															+ JSON
																	.stringify(response.data.ncbDtoList));
										},
										function(response) { // optional
											deferred.reject(response);
											console
													.log("error in getting response");
										});
						return deferred.promise;
					}

					function vehicleRegisteredTo() {
						return [ {
							name : 'INDIVIDUAL',
							code : 'CUSTOMER_INDIVIDUAL'
						}, {
							name : 'COMPANY',
							code : 'COMPANY'
						} ];
					}
					function policyTypeList() {
						return [ {
							name : 'NO POLICY',
							code : 'NO POLICY'
						}, {
							name : 'THIRDPARTY',
							code : 'THIRDPARTY'
						}, {
							name : 'COMPREHENSIVE',
							code : 'COMPREHENSIVE'
						} ];
					}
					// //////////////////////////////////////////////////////
					function processMakeModelData(make_code) {
						var models = [];
						getModelsFromRestUrl()
								.then(
										function(response) {
											angular
													.forEach(
															response.data.makeModelMap,
															function(
																	outer_value,
																	outer_key) {
																if (outer_key == make_code) {
																	if (outer_value.length != 0) {
																		angular
																				.forEach(
																						outer_value,
																						function(
																								inner_value,
																								inner_key) {
																							models
																									.push(inner_value);
																							// console.log("models
																							// :
																							// "+JSON.stringify(models))
																						});
																	} else {
																		console
																				.log("There is no models with this name")
																	}
																}
															});

										});
						return models;
					}

					function getModelsFromRestUrl() {
						var deferred = $q.defer();
						$http(
								{
									url : 'http://server1:8585/masters/getMakeModel.json',
									method : "POST",
								}).then(function(response) {
							deferred.resolve(response);
						}, function(response) {
							deferred.reject(response);
							// console.log("error in getting response");
						});
						return deferred.promise;
					}

					function processMakeSubmodelData(model_code) {
						// console.log("model code : "+model_code)
						var SubModels = [];
						getMakeSubmodelFromRestUrl()
								.then(
										function(response) {
											angular
													.forEach(
															response.data.modelSubModelMap,
															function(
																	outer_value,
																	outer_key) {
																if (outer_key == model_code) {
																	if (outer_value.length != 0) {
																		angular
																				.forEach(
																						outer_value,
																						function(
																								inner_value,
																								inner_key) {
																							SubModels
																									.push(inner_value);
																						});
																	} else
																		console
																				.log("There is no submodels with this name")
																}
															});

										});
						return SubModels;
					}

					function getMakeSubmodelFromRestUrl() {
						var deferred = $q.defer();
						$http(
								{
									url : 'http://server1:8585/masters/getModelSubModel.json',
									method : "POST",
								}).

						then(function(response) {
							deferred.resolve(response);
							// console.log("submodels :
							// "+JSON.stringify(response.data));
						}, function(response) { // optional
							deferred.reject(response);
							console.log("error in getting response");
						});
						return deferred.promise;
					}

					function zoneValue() {
						var deferred = $q.defer();
						$http(
								{
									url : "http://server1:8585/masters/getrtozonalmapping.json",
									method : "POST"
								}).then(function(response) {
							deferred.resolve(response);
							//alert("ZONERESPONSE" + JSON.stringify(response));
						}, function(error) {
							deferred.reject(error);
						});
						return deferred.promise;
					}
				});
