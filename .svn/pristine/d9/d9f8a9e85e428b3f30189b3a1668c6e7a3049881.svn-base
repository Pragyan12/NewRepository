'use strict';
POTApp
		.controller(
				'PremiumComparision',
				function($q, $scope, RatingConstants, PremiumService,
						CoverageService, $state, StorageService,
						PremiumCalculationService, InsurerService) {
					$scope.vehicleInfo = StorageService.get("vehicleInfo");
					$scope.productCode = StorageService.get("subProductCode");
					$scope.compareValues = [];
					$scope.premiumbreakup = [];
					$scope.showCompare = false;
					$scope.showComparePreset = false;
					$scope.showCompareButton = false;
					$scope.showCompareInsurerDetails = false;
					$scope.showInsurerComparition = false;
					$scope.additional_Covers = [];
					$scope.addon_Covers = [];
					$scope.discounts = [];
					$scope.vehicleModelName = StorageService
							.get("vehiclemodelName");
					$scope.vehicleSubModelName = StorageService
							.get("vehicleSubModelName");
					$scope.vehicleSeater = StorageService.get("vehicleSeater");
					$scope.subProductName = StorageService
							.get("subProductName");
					$scope.upaSumInsured = CoverageService
							.getCoverSumInsured('upaSumInsured');
					$scope.bifuelSumInsured = CoverageService
							.getCoverSumInsured('bifuelSumInsured');
					$scope.vdSumInsured = CoverageService
							.getCoverSumInsured('vdSumInsured');
					$scope.padSumInsured = CoverageService
							.getCoverSumInsured('padSumInsured');
					$scope.insurerListValues = calculatePremium();
					$scope.averagesOfIdv = 0;
					// $.scope.resultidvaddition= resultidvaddition();
					/* * Calculating For Premium */
					function calculatePremium() {
						var premiumDetails = {};
						angular
								.forEach(
										InsurerService.getListOfInsurer(),
										function(insurerValue, insurerKey) {
											if (PremiumCalculationService
													.isValidInsurer(insurerValue.insurerCode)) {
												var premiumInfo = PremiumCalculationService
														.calculatePremium(insurerValue.insurerCode);
												insurerValue["premiumDetails"] = premiumInfo;
												premiumDetails[insurerValue.insurerCode] = insurerValue;
											}
										});
						return premiumDetails;
					}

					function getInsurerPremiumDetails(insurerCode) {
						var premiumDetails = {};
						angular
								.forEach(
										InsurerService.getListOfInsurer(),
										function(insurerValue, insurerKey) {
											if (insurerCode === insurerValue.insurerCode) {
												var premiumInfo = PremiumCalculationService
														.calculatePremium(insurerValue.insurerCode);
												insurerValue["premiumDetails"] = premiumInfo;
												premiumDetails = insurerValue;

											}
										});
						return premiumDetails;
					}

					$scope.updateCoverSumInsured = function(coverCode,
							sumInsured) {
						if (coverCode === RatingConstants.UPA) {
							CoverageService.setCoverSumInsured('upaSumInsured',
									sumInsured);
						} else if (coverCode === RatingConstants.VD) {
							CoverageService.setCoverSumInsured('vdSumInsured',
									sumInsured);
						} else if (coverCode === RatingConstants.BFK) {
							CoverageService.setCoverSumInsured(
									'bifuelSumInsured', sumInsured);
						} else if (coverCode === RatingConstants.PAD) {
							CoverageService.setCoverSumInsured('padSumInsured',
									sumInsured);
						}
						$scope.insurerListValues = calculatePremium();

					}
					$scope.addCover = function(coverName, coverCode, coverType,
							flag) {
						// alert("Cover Name=>"+coverName+" Cover Code => "+
						// coverCode+"Cover Type"+coverType+"Flag => "+flag);
						if (flag == true) {
							CoverageService
									.set(coverName, coverCode, coverType);
							if (coverCode === RatingConstants.UPA) {
								CoverageService.setCoverSumInsured(
										'upaSumInsured', '10000');
							} else if (coverCode === RatingConstants.VD) {
								CoverageService.setCoverSumInsured(
										'vdSumInsured', '2500');
							} else if (coverCode === RatingConstants.PAD) {
								CoverageService.setCoverSumInsured(
										'padSumInsured', '10000');
							}
						} else if (flag == false) {
							if (coverCode === RatingConstants.UPA) {
								CoverageService
										.removeCoverSumInsured('upaSumInsured');
							} else if (coverCode === RatingConstants.VD) {
								CoverageService
										.removeCoverSumInsured('vdSumInsured');
							} else if (coverCode === RatingConstants.BFK) {
								CoverageService
										.removeCoverSumInsured('bifuelSumInsured');
							} else if (coverCode === RatingConstants.PAD) {
								CoverageService
										.removeCoverSumInsured('padSumInsured');
							}
							CoverageService
									.removeValuesFromJsonArray(coverCode);
						}
						if (coverCode === RatingConstants.BFK) {
							CoverageService.setCoverSumInsured(
									'bifuelSumInsured', '0');
							$scope.insurerListValues = calculatePremium();
						} else {
							$scope.insurerListValues = calculatePremium();
						}
					}
					$scope.isCoverSelected = function(coverCode) {
						return PremiumCalculationService
								.isCoverSelected(coverCode);
					}

					$scope.showPremiumBreakUp = function(insurerCode) {
						$scope.isPremiumBreakup = true;
						var arr = [];
						var premiumInfo = PremiumCalculationService
								.calculatePremium(insurerCode);
						arr = [
								{
									'name' : RatingConstants.BasicOwndamage,
									'premium' : premiumInfo.basicOdPremium,
									'orderby' : '1'
								},
								{
									'name' : RatingConstants.BasicThirdpartyPropertydamage,
									'premium' : premiumInfo.basicTpPremium,
									'orderby' : '2'
								},
								{
									'name' : RatingConstants.OwndriverCoverCPA,
									'premium' : premiumInfo.cpaPremium,
									'orderby' : '3'
								},
								{
									'name' : 'Tariff Discounts('
											+ premiumInfo.tariffDiscount + '):',
									'premium' : premiumInfo.tariffDiscountAmount,
									'orderby' : '4'
								}, {
									'name' : RatingConstants.NoClaimBonus,
									'premium' : premiumInfo.ncbDiscountAmount,
									'orderby' : '5'
								} ];
						angular.forEach(premiumInfo.selectedAddonCover,
								function(value, key) {
									var coverPremium = {
										'name' : value.coverName,
										'premium' : value.coverPremium,
										'orderby' : 7
									};
									arr.push(coverPremium);
								});
						var premiumDetails = {};
						premiumDetails["coverPremium"] = arr;
						premiumDetails["premiumDetails"] = premiumInfo;
						angular
								.forEach(
										InsurerService.getListOfInsurer(),
										function(insurerValue, insurerKey) {
											if (insurerCode === insurerValue.insurerCode) {
												premiumDetails["insurerDetails"] = insurerValue;
											}
										});
						$scope.premiumbreakup = premiumDetails;
						console.log("ayyanar"
								+ JSON.stringify($scope.premiumbreakup));
					}
					$scope.closePremiumBreakup = function() {
						$scope.isPremiumBreakup = false;
					}
					/**
					 * Insurer Comparision
					 */
					$scope.compare_chkbox = function(insurerCode, checkvalue) {
						var result = false;
						if (checkvalue == true) {
							if ($scope.compareValues.length >= 3) {
								alert("Maximum 3 insurance offers can be compared");
								result = false;
							} else {
								$scope.compareValues
										.push(getInsurerPremiumDetails(insurerCode));
								result = true;
							}
						} else {
							angular
									.forEach(
											$scope.compareValues,
											function(value, key) {
												if (value.premiumDetails.insurerCode === insurerCode) {
													delete $scope.compareValues
															.splice(key, 1);
												}
											});
							result = false;
						}
						if (Object.keys($scope.compareValues).length >= 2) {
							$scope.showComparePreset = true;
							$scope.showCompareButton = true;
						} else if (Object.keys($scope.compareValues).length >= 1) {
							$scope.showComparePreset = true;
							$scope.showCompareButton = false;
						} else {
							$scope.showComparePreset = false;
							$scope.showCompareButton = false;
						}
						return result;
					}

					// $scope.compare_ind_col1={
					// "width" : "200px",
					// "display" : "inline-block"
					// }
					// $scope.compare_ind_col2={
					// "width" : "200px",
					// "display" : "inline-block"
					// }

					$scope.parsevalue = '';
					$scope.check = '';

					// var test=document.getElementsByClassName("test1");
					//		
					// alert("class value"+JSON.stringify(test[0]));
					// console.log("class value"+test.height);

					// var test=angular.element("div").find("test1").width();
					// alert(test);

					// var test= $("#mark").find( ".test1" );
					//		
					// alert(test.height);
					//		

					$scope.compareInsurer = function() {
						$scope.showInsurerComparition = true;
						// alert(($('.compare_premium_ind_row').children().css('width')));

						$scope.check = $('.test1').css('width');
						// alert($scope.compareValues.length);

						// alert("check"+$scope.check);
						var test = [];
						var i = 0;
						var data = 0;
						$(".compare_premium_ind_row div:first-child")
								.each(
										function() {

											for (i = 0; i < $scope.compareValues.length + 1; i++) {
												test[i] = $(this).css('width')
														.substring(0, 3);
												data = parseInt($(this).css(
														'width')
														.substring(0, 3))
														+ data;
												// alert("array"+test[i]+"count"+i+"data"+data);
											}

										});

						$scope.check = data + 40 + 'px';
						// alert($scope.check);

						$scope.breakup_width = {
							"width" : $scope.check
						}
						// $scope.compare_ind_col1.width.substring(0,3);
						// $scope.parsevalue=parseInt($scope.compare_ind_col2.width.substring(0,3));
						// $scope.check=$scope.parsevalue+$scope.parsevalue+'px';
						//			   
						// alert($scope.parsevalue+$scope.parsevalue+'px');

						var result = [];
						angular
								.forEach(
										$scope.compareValues,
										function(value, key) {
											result
													.push(getInsurerPremiumDetails(value.premiumDetails.insurerCode));
										});
						return $scope.compareValues = result;
					}

					$scope.emptyCompare = function() {
						$scope.showInsurerComparition = false;
						$scope.compareCheckBox = false;
						$scope.compareValues = [];
						for (var i = 0; i < $scope.insurerListValues.length; i++) {
							$scope.checkvalue[i] = false;
					    }
					}

					$scope.selectedCovers = function() {
						return CoverageService.getSelectedCovers();
					}

					/* Premium details to next page for payment */
					$scope.buynow = function(selectedinsurerCode, isAddon) {
						if (!isAddon) {
							CoverageService.removeAllCovers();
						}
						var premiumDetailsforPayment = getInsurerPremiumDetails(selectedinsurerCode);
						StorageService.set('premiumInfo',
								premiumDetailsforPayment);
						$state.go('premiumSummary');
					}

					$scope.validateSingleIdvEdit = function(idv) {
						if (angular.isDefined(idv) || angular.isNumber(idv)) {
							$scope.editIdv = true;
							$scope.saveIdv = false;
							$scope.save_click = 'input_border_hide'
							return true;
						} else {
							$scope.editIdv = false;
							$scope.saveIdv = true;
							$scope.save_click = 'input_border'
						}
						return false;
					}
					/* update the particular insurer method */
					$scope.updateIdv = function(insurerCode, actualIdv, idv) {
						$scope.insurerListValues = '';
						PremiumService
								.getUpdateIdv(insurerCode, idv,
										StorageService.get("vehicleInfo"))
								.then(
										function(response) {
											PremiumCalculationService
													.getUpdateIdv(insurerCode,
															response.data);
											$scope.insurerListValues = calculatePremium();
										});
					}

					/* update the whole insurer for idvrange */
					$scope.updatefullIdv = function(idv) {
						if (idv != null) {
							$scope.insurerListValues = '';
							PremiumService
									.getIdvRange(idv,
											StorageService.get("vehicleInfo"))
									.then(
											function(response) {
												PremiumCalculationService
														.getIdvRange(response.data);
												$scope.insurerListValues = calculatePremium();
												$scope.averagesOfIdv = PremiumCalculationService
														.idvalledit();
											});
						} else {
							$scope.averagesOfIdv = 0;
						}
					}
					$scope.averagesOfIdv = PremiumCalculationService
							.idvalledit();

					getAddonCoverList();
					function getAddonCoverList() {
						var addonCover = [];
						CoverageService
								.getCoverageList()
								.then(
										function(d) {
											$scope.addonCover = d;
											angular
													.forEach(
															$scope.addonCover,
															function(value,
																	index) {
																if (value.coverageType === RatingConstants.ADDITIONAL) {
																	$scope.additional_Covers
																			.push(value);
																} else if (value.coverageType === RatingConstants.ADDON) {
																	$scope.addon_Covers
																			.push(value);
																} else if (value.coverageType === RatingConstants.DISCOUNTS) {
																	$scope.discounts
																			.push(value);
																}
															});
										},
										function(errResponse) {
											console
													.error('Error while fetching Users');
										});
						return addonCover;
					}

					$scope.mark = "";
					/*
					 * $scope.mark=StorageService.get("vehicleInfo").currentNCB.ncbPercentage;
					 * alert("mark induja"+JSON.stringify($scope.mark));
					 * console.log("mark indhjua"+JSON.stringify($scope.mark));
					 */

					$scope.test = angular.isUndefined(StorageService
							.get("vehicleInfo").currentNCB) ? false
							: StorageService.get("vehicleInfo").currentNCB === '' ? false
									: true;

					
					
					
					
					
					$scope.fuelTypeChange = function(coverCode) {
						var result=false;
						if(coverCode===RatingConstants.BFK){
							var fuelType = $scope.vehicleInfo.fuelType;
							if(fuelType ==='PETROL' ||fuelType ==='DIESEL'){
								result=true;
							}
						}else if(coverCode===RatingConstants.UPA){
							var vehicleRegisteredTo =$scope.vehicleInfo.vehicleRegisteredTo.name;
							if(vehicleRegisteredTo ==='INDIVIDUAL'){
								result =true;
							}
						}else if(coverCode===RatingConstants.PAD || coverCode===RatingConstants.LLD_COVER || coverCode===RatingConstants.LLE_COVER){
							var vehicleRegisteredTo =$scope.vehicleInfo.vehicleRegisteredTo.name;
							if(vehicleRegisteredTo ==='COMPANY'){
							result =true;
							}
						}
						
					else{
							result=true;
						}
						return result; 
					}

				});
