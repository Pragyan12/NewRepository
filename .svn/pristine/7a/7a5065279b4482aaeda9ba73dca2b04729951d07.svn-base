/**
 * Premium Computation Logic
 */
POTApp.factory('PremiumCalculationService', function(CoverageService,StorageService,$http,$q,$filter,RatingConstants) {

	var premiumDetailsForAll = {};
	var count = 0;
	return {
		callServer : callServer,
		calculatePremium : calculatePremium,
        isValidInsurer : isValidInsurer,
        getUpdateIdv : getUpdateIdv,
        isCoverSelected : isCoverSelected,
        getIdvRange : getIdvRange,
        vehicleAgeCaluculation : vehicleAgeCaluculation,
        idvalledit : idvalledit
	}	

	function callServer(){
		var productCode = StorageService.get("subProductCode");
        var vehicleDetails = StorageService.get("vehicleInfo");
       
    console.log("bifuelchjjkkkkk"+JSON.stringify(vehicleDetails));
    
    
var data = {
 "cubicCapacity":vehicleDetails.engineCC,
 "makeCode":vehicleDetails.manufacturer.code,
 "modelCode":vehicleDetails.model.code,
 "subModelCode":vehicleDetails.subModel.subModelCode,
 "yearOfManufacture":vehicleDetails.year,
 "idv":"0",
 "businessType":"Rollover",
 "quoteNo":"12345",
 "ncbPercentage":vehicleDetails.ncb.name,
 "fuelType":vehicleDetails.fuelType,
 "zoneCode":vehicleDetails.ZoneArea,
 "rtoCode":vehicleDetails.rtoCode.rtoCode,
 "seatingCapacity":vehicleDetails.seatingCapacity,
 "engineCapacity":vehicleDetails.subModel.engineCC,
 "productCode":"PCC",
 "vehicleAge":vehicleAgeCaluculation(),
 "customerType":vehicleDetails.vehicleRegisteredTo.code
	        	}
var s=vehicleAgeCaluculation();
	var deferred=$q.defer();
		$http({
	    	url : "http://server1:8585/digital/calculateCoveragePremium.json",
	    	method : "POST",data}).then(function(response){
	    		premiumDetailsForAll=response.data;
	    			deferred.resolve(response);
	    		},function(error){
	    			deferred.reject(error);
	    		});
    return deferred.promise; 
	}

	function isValidInsurer(insurerCode)
	{
		var premiumDetailsForTheInsurer=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
		
		if(angular.isUndefined(premiumDetailsForTheInsurer)){
			return false;
		}else{
			return true;
		}
	}
	function idvalledit()
	{
		var resultofidv=0;
		var allidvaddition=0;
		var premiumDetailsForTheInsurer=premiumDetailsForAll.premiumDetails.listOfmotorPremium;
		angular.forEach(premiumDetailsForTheInsurer, function(value, key) 
				{
             allidvaddition =allidvaddition+value.actualIdv;
			 resultofidv=(allidvaddition/11);
		});
		
		return resultofidv.toFixed(2);
	
	}	
	function calculatePremium(insurerCode) 
	{
//        console.log("Insurer Code => "+insurerCode);
		var premiumDetailsForTheInsurer=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
		var premiumDetails={};
		
		var basicOdPremium = getBasicCoverPremium(insurerCode,RatingConstants.OD_COVER);
//		console.log("Basic Od Premium => " +basicOdPremium);
		
		var basicTpPremium = getBasicCoverPremium(insurerCode,RatingConstants.TPL_COVER);
//		console.log("basicTpPremium => " +basicTpPremium);
		
		var cpaPremium = getBasicCoverPremium(insurerCode, RatingConstants.CPA_COVER);
//		console.log("cpaPremium => " +cpaPremium);
		
		var upaPremium = getSelectedCoverPremium(insurerCode,RatingConstants.UPA_COVER);
//		console.log("upaPremium => " +upaPremium);
			
		var lldPremium = getSelectedCoverPremium(insurerCode,RatingConstants.LLD_COVER);
//		console.log("lldPremium => " +lldPremium);
			
		var biFuelPremium = getBiFuelPremium(insurerCode,basicOdPremium);
//		console.log("biFuelPremium => " +biFuelPremium);
			
		var bifuelTpPremium = getBiFuelTPPremium(insurerCode);
//		console.log("bifuelTpPremium => " +bifuelTpPremium);
			
		var tariffDiscount = getTariffDiscount(insurerCode);
//		console.log("tariffDiscount => " +tariffDiscount);
			
		var tariffDiscountAmount = getDiscountPremium(basicOdPremium, tariffDiscount);
//		console.log("tariffDiscountAmount => " +tariffDiscountAmount);
			
		var netOdPremium = checkPremium(basicOdPremium) - tariffDiscountAmount +checkPremium(biFuelPremium);
//		console.log("netOdPremium => " +netOdPremium);
		
			// Discount covers
		var autoMobileAssociationMembers=getAutoMobileAssociationMembers(netOdPremium,insurerCode);
//		console.log("autoMobileAssociationMembers => " +autoMobileAssociationMembers);
			
		var voluntaryDeductible=getVoluntaryDeductible(netOdPremium,insurerCode);
//		console.log("voluntaryDeductible => " +JSON.stringify(voluntaryDeductible));
 
		var totalOdPremium = netOdPremium - checkPremium(autoMobileAssociationMembers) - checkPremium(voluntaryDeductible);
//		console.log("totalOdPremium => " +totalOdPremium);
		
		var ncbDiscountAmount = getNCBPremium(totalOdPremium);
//		console.log("ncbDiscountAmount => " +ncbDiscountAmount);
			
		totalOdPremium = totalOdPremium - checkPremium(ncbDiscountAmount);
//		console.log("totalOdPremium => " +totalOdPremium);
		
		var antiTheftDiscountPremium=getAntiTheftDiscountPremium(totalOdPremium,insurerCode);
//		console.log("antiTheftDiscountPremium =>"+antiTheftDiscountPremium);
		
		totalOdPremium = totalOdPremium - checkPremium(antiTheftDiscountPremium);
//		console.log("totalOdPremium => " +totalOdPremium);
		
		var paidtoDriver =  getSelectedCoverPremium(insurerCode,RatingConstants.PAD);
		console.log("paidtoDriver => " +paidtoDriver);
		
		var totalTpPremium = checkPremium(basicTpPremium) +checkPremium(bifuelTpPremium) +checkPremium(lldPremium)+checkPremium(cpaPremium) +checkPremium(upaPremium);
//		console.log("totalTpPremium => " +totalTpPremium);
		
		var totalAddonCoverPremium = getTotalAddonPremium(insurerCode);
//		console.log("totalAddonCoverPremium => "+totalAddonCoverPremium);
		
		var totalPremiumWithoutAddons = totalOdPremium + totalTpPremium;
//		console.log("totalPremiumWithoutAddons => "+totalPremiumWithoutAddons);
		
		var totalPremiumWithAddons = totalPremiumWithoutAddons+ totalAddonCoverPremium;
//		console.log("totalPremiumWithAddons => " +totalPremiumWithAddons);
		
		var listOfServiceTaxWithOutAddons = calculateServiceTax(insurerCode,totalPremiumWithoutAddons);
//		console.log("totalPremiumWithoutAddons =>"+JSON.stringify(listOfServiceTaxWithOutAddons));
		
		var listOfAddonCoverServiceTax = calculateServiceTax(insurerCode,totalAddonCoverPremium);
//		console.log("listOfServiceTaxWithAddons => "+JSON.stringify(listOfAddonCoverServiceTax));
		
		var sumOfServiceTaxWithOutAddons = sumOfServiceTax(listOfServiceTaxWithOutAddons);
//		console.log("sumOfServiceTaxWithOutAddons => "+sumOfServiceTaxWithOutAddons);
		
		// sathish
		var sumOfAddonCoverServiceTax = sumOfServiceTax(listOfAddonCoverServiceTax);
//		console.log("sumOfServiceTaxWithAddons => "+sumOfAddonCoverServiceTax);
		
		var listOfServiceTax = calculateServiceTax(insurerCode,totalPremiumWithAddons);
//		console.log("listOfServiceTaxWithAddons => "+JSON.stringify(listOfServiceTax));
		
		var totalServiceTax = sumOfServiceTax(listOfServiceTax);
//		console.log("totalServiceTax => "+totalServiceTax);
		
		var grossPremium = totalPremiumWithAddons + totalServiceTax;
//		console.log("grossPremium => "+grossPremium);
		
		var grossPremiumWithoutAddons = totalPremiumWithoutAddons + sumOfServiceTaxWithOutAddons;
//		 console.log("grossPremiumWithoutAddons => "+grossPremiumWithoutAddons);
				
		var grossPremiumWithAddons = grossPremium;
//		console.log("grossPremiumWithAddons => "+grossPremiumWithAddons);
					
			
		var coverDetails=[];
	
		var selectedCovers = CoverageService.getSelectedCovers();
		if(angular.isDefined(selectedCovers) && ! angular.equals({}, selectedCovers)){
			console.log("selectedCovers"+JSON.stringify(selectedCovers));
			angular.forEach(selectedCovers, function(value, key) {
				var coverPremium = -99999;
				
				if(key===RatingConstants.AT){
					coverPremium = antiTheftDiscountPremium;
				}else if(key===RatingConstants.VD){
					coverPremium = voluntaryDeductible;
				}else if(key===RatingConstants.AMSM){
					coverPremium = autoMobileAssociationMembers;
				}else if(key===RatingConstants.BFK){
					coverPremium = biFuelPremium;
				}
				else if(key===RatingConstants.PAD){
					coverPremium = paidtoDriver;
				}
				else{
					coverPremium = getBasicCoverPremium(insurerCode,key);
				}	
				var array={
						"coverCode": key,
						"coverName": selectedCovers[key].name,
						"coverPremium": coverPremium,
						"coverType": selectedCovers[key].coverType
					};
				coverDetails.push(array);
			});
		}
			premiumDetails = {
				"insurerCode" : insurerCode,
				"actualIdv" : premiumDetailsForTheInsurer.actualIdv,
				"vehicleAge" : premiumDetailsForTheInsurer.vehicleAge,
				"basicOdPremium" : basicOdPremium,
				"basicTpPremium" : basicTpPremium,
				"cpaPremium" : cpaPremium,
				"tariffDiscount" : tariffDiscount,
				"tariffDiscountAmount" : tariffDiscountAmount,
				"ncbDiscountAmount" : ncbDiscountAmount,
				"antiTheftDiscountAmount" : antiTheftDiscountPremium,
				"totalOdPremium" : totalOdPremium,
				"totalTpPremium" : totalTpPremium,
				"selectedAddonCover" : coverDetails,
				"totalAddonCoverPremium" : totalAddonCoverPremium,
				"totalPremiumWithoutAddons" : totalPremiumWithoutAddons,
				"totalPremiumWithAddons" : totalPremiumWithAddons,
				"listOfServiceTaxWithAddons" : listOfAddonCoverServiceTax,
				"totalServiceTax" : totalServiceTax,
				"grossPremium" : grossPremium,
				"grossPremiumWithoutAddons":grossPremiumWithoutAddons,
				"grossPremiumWithAddons":grossPremiumWithAddons	
			}
			console.log(JSON.stringify(premiumDetails));
			return premiumDetails;
	}
	
	/*
	 * Calculating Vehicle Age
	 */
	function vehicleAgeCaluculation()
	{
        var vehicleDetails = StorageService.get("vehicleInfo");
		var vehicleAge=0;
		var currentSystDate=new Date();	
		var registrationDate=vehicleDetails.registrationDate;
		var prevPolicyExpDate=vehicleDetails.prevPolicyExpDate;
		if (angular.equals(RatingConstants.NO_POLICY, vehicleDetails.policyType.code)) {
            var regDate = new Date(registrationDate); 
            var dayDif = (currentSystDate - regDate)  / 1000 / 60 / 60 / 24;
			vehicleAge=dayDif/365;
		}else {
			if(currentSystDate>prevPolicyExpDate) {
				var regDate = new Date(registrationDate); 
		        var dayDif = (currentSystDate - regDate)  / 1000 / 60 / 60 / 24;
				vehicleAge=dayDif/365;
			} else{
		        var regDate = new Date(registrationDate); 
				var prevDate = new Date(prevPolicyExpDate);
		    	var dayDif = (prevDate - regDate)  / 1000 / 60 / 60 / 24;
				vehicleAge=dayDif/365;	
			}
		}
		return vehicleAge.toFixed(2);
	}
	function isCoverSelected(coverCode){
		var selectedCovers = CoverageService.getSelectedCovers();
		if(angular.isDefined(selectedCovers) && ! angular.equals({}, selectedCovers)){
			var coverDetails = selectedCovers[coverCode];
			if(angular.isDefined(coverDetails) ){
				return true;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	
	function  getSelectedCoverPremium(insurerCode,coverCode){
		if(isCoverSelected(coverCode)){
			var selectedCovers = CoverageService.getSelectedCovers();
			if(angular.isDefined(selectedCovers) && ! angular.equals({}, selectedCovers)){
				var coverDetails = selectedCovers[coverCode];
				if(angular.isDefined(coverDetails) ){
					return getBasicCoverPremium(insurerCode,coverCode);
				}else{
					return RatingConstants.RATE_NA;
				}
			}else{
				return RatingConstants.RATE_NA;
			}
		}else{
			return RatingConstants.RATE_NA;
		}
	}
	
	function getBasicCoverPremium(insurerCode,coverCode) {
		var premiumDetails=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
		var coverPremium=RatingConstants.RATE_NA;
		if(angular.isDefined(premiumDetails) && ! angular.equals({}, premiumDetails)){
			var coverageDetails  = premiumDetails.coverList[coverCode];
			if(angular.isDefined(coverageDetails) && ! angular.equals({}, coverageDetails)){
				if(coverCode==RatingConstants.UPA_COVER){
					angular.forEach(coverageDetails.coverElements, function(value, key) {
						if(angular.isDefined(value) && ! angular.equals({}, value)){
							var sumInsured = CoverageService.getCoverSumInsured('upaSumInsured');
							if(value.type==RatingConstants.SUM_INSURED && value.sumInsured==sumInsured){
								coverPremium=value.value;
							}
						}
					});
				}else if(coverCode==RatingConstants.PAD){
					angular.forEach(coverageDetails.coverElements, function(value, key) {
						if(angular.isDefined(value) && ! angular.equals({}, value)){
							var sumInsured = CoverageService.getCoverSumInsured('padSumInsured');
							if(value.type==RatingConstants.SUM_INSURED && value.sumInsured==sumInsured){
								alert("sumInsured"+JSON.stringify(sumInsured));
								alert("coverPremium"+JSON.stringify(value.value));
								coverPremium=value.value;
							}
						}
					});
				}else{
					coverPremium=coverageDetails.premium;
				}
			}else{
				coverPremium=RatingConstants.RATE_NA;
			}
		}else{
			coverPremium=RatingConstants.RATE_NA;
		}
		return coverPremium;
	}
	
	
	function getBiFuelPremium(insurerCode,basicOdPremium) {
		var addoncalc=0;
		var vehicleDetails = StorageService.get("vehicleInfo");
		if(vehicleDetails.inbuilt === true ){
			var premiumDetails=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
			var coverageDetails  = premiumDetails.coverList[RatingConstants.BFK];
			if(angular.isDefined(coverageDetails) && ! angular.equals({}, coverageDetails)){
				addoncalc= coverageDetails.rate * basicOdPremium / 100;
			}
			
		}
		else if(isCoverSelected(RatingConstants.BFK)){
			var premiumDetails=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
			var coverageDetails  = premiumDetails.coverList[RatingConstants.BFK];
			if(angular.isDefined(coverageDetails) && ! angular.equals({}, coverageDetails)){
				var sumInsured = CoverageService.getCoverSumInsured('bifuelSumInsured');
				if(!angular.isUndefined(sumInsured)){
					var s=parseInt(sumInsured);
					if (angular.isNumber(s)){
						addoncalc= coverPremuim(coverageDetails.rateType,coverageDetails.rate,coverageDetails.flat,sumInsured);
					}
				}
			}
		}
		return addoncalc;
	}
	function getBiFuelTPPremium(insurerCode) {
		var vehicleDetails = StorageService.get("vehicleInfo");
		var biFuelTPPremium=0;
		if(isCoverSelected(RatingConstants.BFK) || vehicleDetails.inbuilt === true ){
			var premiumDetails=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
			var coverageDetails  = premiumDetails.coverList[RatingConstants.BFK];
			if(angular.isDefined(coverageDetails) && ! angular.equals({}, coverageDetails)){
				if(coverageDetails.coverElements.length>0){
					 angular.forEach(coverageDetails.coverElements, function(value, key) {
						 if(value.type="BIFUEL_TP")
								biFuelTPPremium = value.value;
					 });
				}
			}
		}
		 return biFuelTPPremium;
	}
	
	
	function coverPremuim(rateType,rate,flat,premium){
		var coverPremium=0;
		if(RatingConstants.RATE===rateType){
			if(rate!=RatingConstants.RATE_NA){
				coverPremium = rate * premium/100;
			}else{
				coverPremium = RatingConstants.RATE_NA;
			}
		}else if(RatingConstants.FLAT===rateType){
			if(flat!=RatingConstants.RATE_NA){
				coverPremium = flat;
			}else{
				coverPremium = RatingConstants.RATE_NA;
			}
			
		}else if(RatingConstants.BOTH===rateType){
			if(rate!=RatingConstants.RATE_NA){
				coverPremium = rate * premium/100;
			}
			if(flat!=RatingConstants.RATE_NA){
				coverPremium = coverPremium+flat;
			}
			if(rate!=RatingConstants.RATE_NA && flat!=RatingConstants.RATE_NA){
				coverPremium = RatingConstants.RATE_NA;
			}
		}
		return coverPremium;
	}
	
	function getTariffDiscount(insurerCode) {
		var value=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
		var tariffDiscount = value.tariffDiscount;
        return tariffDiscount;
	}
	function getDiscountPremium(basicOdPremium, tariffDiscount) {
		return (basicOdPremium * tariffDiscount/100);
	}
	function getNCBPremium(totalOdPremium) {
		var ncbPremium=0;
		var vehicleInfo=StorageService.get("vehicleInfo");
		if (!angular.equals(RatingConstants.NO_POLICY, vehicleInfo.policyType.code) && !angular.equals(RatingConstants.THIRDPARTY, vehicleInfo.policyType.code)){
			var ncbPercentage = vehicleInfo.currentNCB.ncbPercentage;
			var ncbNumber=parseInt(ncbPercentage);
			if ( angular.isNumber(ncbNumber)){
				ncbPremium = (totalOdPremium)*ncbNumber/100;
			}
		}
		return ncbPremium;
	}
	function getTotalAddonPremium(insurerCode) {
		var totalAddonPremium=0;
		var selectedAddonCover = CoverageService.getSelectedCovers();
		angular.forEach(selectedAddonCover, function(value, key) {
			if(value.coverType===RatingConstants.ADDON){
				var coverPremium = 	getBasicCoverPremium(insurerCode,key);
				if(coverPremium!=RatingConstants.RATE_NA){
					totalAddonPremium=totalAddonPremium+coverPremium;
                }
			}
		});
		return totalAddonPremium;
	}
	function calculateServiceTax(insurerCode,premium) {
		var premiumDetails=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
        var listOfServiceTax = [];
        angular.forEach(premiumDetails.listOfServiceTax, function(value, key) {
			var array ={"nameOfTax":value.nameOfTax,"rate":value.rate,"amount":(premium*value.rate/100)};
			listOfServiceTax.push(array);
        });
        return listOfServiceTax;
	}
	function sumOfServiceTax(listOfServiceTaxWithOutAddons) {
		var servicTax = 0;
		angular.forEach(listOfServiceTaxWithOutAddons, function(value, key) {
			servicTax =  servicTax+value.amount;
		});
		return servicTax;
	}
	/* Discount covers */
	function getAutoMobileAssociationMembers(netOdPremium,insurerCode){ 
		var autoAssociationIndia=0;
		if(isCoverSelected(RatingConstants.AMSM)){
			var premiumDetails=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
			var coverageDetails  = premiumDetails.coverList[RatingConstants.AMSM];
			if(angular.isDefined(coverageDetails) && ! angular.equals({}, coverageDetails)){
				if(coverageDetails.coverElements.length>0){
					autoAssociationIndia= coverPremuim(coverageDetails.rateType,coverageDetails.rate,coverageDetails.flat,netOdPremium);
					angular.forEach(coverageDetails.coverElements, function(value, key) {
						 if(value.type="AMSM_MAX_DISCOUNT")
							 autoAssociationIndia=autoAssociationIndia>value.maxValue?value.maxValue:autoAssociationIndia;
					 });
				}
			}
		}
        return autoAssociationIndia;
	}
	function getVoluntaryDeductible(netOdPremium,insurerCode){
		var voluntaryDeductible=0;
		if(isCoverSelected(RatingConstants.VD)){
			var premiumDetails=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
			var coverageDetails  = premiumDetails.coverList[RatingConstants.VD];
			var sumInsured = CoverageService.getCoverSumInsured('vdSumInsured');
			if(angular.isDefined(coverageDetails) && ! angular.equals({}, coverageDetails)){
				angular.forEach(coverageDetails.coverElements, function(value, key) {
					 if(value.type=RatingConstants.SUM_INSURED && value.sumInsured==sumInsured){
						 voluntaryDeductible=(netOdPremium * value.rate)/100;
						 voluntaryDeductible=voluntaryDeductible>value.maxValue?value.maxValue:voluntaryDeductible;
					 }
				 });
			}
		}
		return voluntaryDeductible;
	}
	function getAntiTheftDiscountPremium(totalOdPremium,insurerCode){
		var antiTheftDiscountAmount=0;
		if(isCoverSelected(RatingConstants.AT)){
			var premiumDetails=premiumDetailsForAll.premiumDetails.listOfmotorPremium[insurerCode];
			var coverageDetails  = premiumDetails.coverList[RatingConstants.AT];
			if(angular.isDefined(coverageDetails) && ! angular.equals({}, coverageDetails)){
				antiTheftDiscountAmount= coverPremuim(coverageDetails.rateType,coverageDetails.rate,coverageDetails.flat,totalOdPremium);
				angular.forEach(coverageDetails.coverElements, function(value, key) {
					 if(value.type="MAX_DISCOUNT"){
						 antiTheftDiscountAmount=antiTheftDiscountAmount>value.maxValue?value.maxValue:antiTheftDiscountAmount;
					 }
				 });
				
			}
		}
		return antiTheftDiscountAmount;
	}
	
	function checkPremium(premium){
		return premium==-99999?0:premium;
	}
	
	/* Idv edit for particular insurer */
	function getUpdateIdv(insurerCode,idvForSingleInsurer){
		angular.forEach(premiumDetailsForAll.premiumDetails.listOfmotorPremium,function(value, key) {
			if (key === insurerCode) 
			{
				delete premiumDetailsForAll.premiumDetails.listOfmotorPremium[key];
				premiumDetailsForAll.premiumDetails.listOfmotorPremium[key] = idvForSingleInsurer.premiumDetails.listOfmotorPremium[insurerCode];
			}
		});
	}
	/* Idv edit for full Insurer */
	function getIdvRange(idvForInsurer){
		// alert("jithtesting"+JSON.stringify(idvForInsurer));
		premiumDetailsForAll=idvForInsurer;
	}

});